import http.server
import socketserver
import json
import urllib.parse
from pathlib import Path
import traceback

# Import the simulation components
from mesa import Agent, Model
from mesa.space import MultiGrid
from mesa.time import RandomActivation
from mesa.datacollection import DataCollector
import numpy as np
from collections import defaultdict, Counter

# Import all the classes and functions from simulation.py
from simulation import (
    SimLogger, Hostage, FalseAlarm, Gate, Disturbance,
    TacticalAgent, RescueModel, get_grid_board
)

class SimulationHandler(http.server.BaseHTTPRequestHandler):
    
    def do_GET(self):
        """Handle GET requests"""
        parsed_path = urllib.parse.urlparse(self.path)
        path = parsed_path.path
        
        if path == '/run_simulation':
            self.handle_run_simulation()
        elif path == '/health':
            self.handle_health_check()
        elif path == '/' or path == '':
            self.handle_index()
        else:
            self.send_error(404, "Endpoint not found")
    
    def do_OPTIONS(self):
        """Handle OPTIONS requests for CORS preflight"""
        self.send_response(200)
        self.send_cors_headers()
        self.end_headers()
    
    def send_cors_headers(self):
        """Send CORS headers"""
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
    
    def send_json_response(self, data, status_code=200):
        """Send JSON response with proper headers"""
        json_data = json.dumps(data, ensure_ascii=False, indent=2)
        
        self.send_response(status_code)
        self.send_header('Content-Type', 'application/json; charset=utf-8')
        self.send_cors_headers()
        self.send_header('Content-Length', len(json_data.encode('utf-8')))
        self.end_headers()
        self.wfile.write(json_data.encode('utf-8'))
    
    def handle_run_simulation(self):
        """
        Endpoint that runs the complete simulation and returns the JSON log.
        Returns the same format as the log.json file generated by the simulation.
        """
        try:
            print("Starting simulation...")
            
            # Create the model using the config.json file
            model = RescueModel("config.json")
            
            # Set up DataCollector for tracking simulation state
            model.datacollector = DataCollector(
                model_reporters={
                    "Grid": lambda m: np.array(get_grid_board(m)),
                    "AgentsRC": lambda m: sorted(
                        (str(a.unique_id), a.pos[1] + 1, a.pos[0] + 1)
                        for a in m.schedule.agents
                        if getattr(a, "pos", None) is not None
                    )
                }
            )
            
            # Collect initial state (frame 0 / tick 0 snapshot)
            model.datacollector.collect(model)
            
            # Run the simulation
            MAX_STEPS = 500
            for i in range(MAX_STEPS):
                if not model.running:
                    break
                model.step()
            
            print(f"Simulation completed in {model.turn_counter} steps")
            
            # Determine the result
            if model.hostages_rescued >= 7:
                result = "win"
            elif model.hostages_lost >= 4:
                result = "lose_lost"
            elif model.structural_damage >= 25:
                result = "lose_collapse"
            else:
                result = "timeout"
            
            # Generate the simulation log in the same format as the original
            simlog = model.logger.to_simlog(
                result=result,
                rescued=model.hostages_rescued,
                lost=model.hostages_lost,
                damage=model.structural_damage,
                meta={
                    "rows": model.grid.height,
                    "cols": model.grid.width,
                    "initial_hostages": model.initial_hostages,
                    "initial_alarms": model.initial_alarms,
                    "initial_disturbances": model.initial_disturbances,
                    "false_alarms_investigated": model.false_alarms_investigated,
                    "total_steps": model.turn_counter
                }
            )
            
            print(f"Simulation result: {result}")
            print(f"Rescued: {model.hostages_rescued}, Lost: {model.hostages_lost}, Damage: {model.structural_damage}")
            
            self.send_json_response(simlog)
            
        except Exception as e:
            print(f"Error running simulation: {str(e)}")
            print(traceback.format_exc())
            error_response = {
                "error": str(e),
                "message": "An error occurred while running the simulation"
            }
            self.send_json_response(error_response, 500)
    
    def handle_health_check(self):
        """Simple health check endpoint"""
        response = {
            "status": "healthy",
            "message": "Simulation server is running"
        }
        self.send_json_response(response)
    
    def handle_index(self):
        """Root endpoint with API information"""
        response = {
            "message": "Tactical Rescue Simulation Server",
            "endpoints": {
                "/run_simulation": "GET - Run a complete simulation and return JSON log",
                "/health": "GET - Health check",
                "/": "GET - This information"
            }
        }
        self.send_json_response(response)
    
    def log_message(self, format, *args):
        """Override to customize logging"""
        print(f"{self.address_string()} - {format % args}")

def start_server(port=5000):
    """Start the HTTP server"""
    # Check if config.json exists
    config_path = Path("config.json")
    if not config_path.exists():
        print("Warning: config.json not found in current directory")
        print("Make sure config.json is in the same directory as server.py")
        return
    
    print("Starting Tactical Rescue Simulation Server...")
    print("Available endpoints:")
    print("  GET /run_simulation - Run simulation and get JSON log")
    print("  GET /health - Health check")
    print("  GET / - API information")
    print(f"Server will run on http://localhost:{port}")
    
    try:
        with socketserver.TCPServer(("", port), SimulationHandler) as httpd:
            print(f"Server started at port {port}")
            httpd.serve_forever()
    except KeyboardInterrupt:
        print("\nServer stopped by user")
    except Exception as e:
        print(f"Server error: {e}")

if __name__ == '__main__':
    start_server()